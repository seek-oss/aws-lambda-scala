buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        // provides proguard.gradle.ProGuardTask (including all requirements)
        classpath 'net.sf.proguard:proguard-gradle:6.0.3'
    }
}

plugins {
    id 'scala'
    id 'com.github.maiflai.scalatest' version '0.23'
}

group 'tekumara'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    def scalaBuildVersion = '2.11'
    def scalaVersion = '2.11.12'

    compile "org.scala-lang:scala-library:${scalaVersion}"
    compile "com.typesafe.scala-logging:scala-logging_${scalaBuildVersion}:3.9.0"

    compile "com.amazonaws:aws-lambda-java-core:1.2.0"

    // provides LambdaAppender which adds AWSRequestId to the MDC
    compile "com.amazonaws:aws-lambda-java-log4j2:1.1.0"

    // scala-logging uses slf4j, which we route to log4j
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.11.2"

    testCompile "org.scalatest:scalatest_${scalaBuildVersion}:3.0.5"

    // used by com.github.maiflai.scalatest
    testRuntime 'org.pegdown:pegdown:1.6.0'
}

// bundle just the libs together, rather than making an uber jar, in an attempt to improve
// local run startup times
task bundleLibs(type: proguard.gradle.ProGuardTask, dependsOn: jar) {
    configuration 'proguard.conf'

    // TODO - can we completely remove our app here
    // include our app
    injars jar.archivePath
    
    // include the app's runtime deps
    // we need to make sure we keep META-INF/services/* for apps like log4j that uses j.u.ServiceLoader to find implementations
    injars configurations.runtime.files, filter: '!META-INF/versions/**, !META-INF/*, !META-INF/org/apache/logging/log4j/core/config/plugins/Log4j2Plugins.dat'
    
    outjars "${buildDir}/libs/libs.jar"
}

task buildZip(type: Zip, dependsOn: bundleLibs) {
    // set the base name of the zip file
    baseName = "lambda"
    // no version suffix, gives the built zip a stable name that can be referenced in cloudformation yaml file
    version = ""
    from compileScala
    from processResources
    // the AWS runtime expects to find jars in the lib/ dir
    into('lib') {
        from "${buildDir}/libs/libs.jar"
    }
}

build.dependsOn buildZip